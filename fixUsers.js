import mongoose from "mongoose";
import dotenv from "dotenv";

// Carregar vari√°veis de ambiente
dotenv.config({ path: ".env.local" });

// Conectar ao MongoDB
async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log("üîó Conectado ao MongoDB");
  } catch (error) {
    console.error("‚ùå Erro ao conectar ao MongoDB:", error);
    process.exit(1);
  }
}

// Schema tempor√°rio para usu√°rios existentes
const UserSchema = new mongoose.Schema({
  name: String,
  email: String,
  password: String,
  isAdmin: Boolean,
  role: String,
  isActive: Boolean,
  createdAt: Date,
  updatedAt: Date
});

const User = mongoose.model("User", UserSchema);

// Fun√ß√£o para corrigir usu√°rios
async function fixUsers() {
  try {
    console.log("üîÑ Corrigindo usu√°rios existentes...");
    
    // Buscar todos os usu√°rios
    const users = await User.find({});
    console.log(`üìä Encontrados ${users.length} usu√°rios`);
    
    for (const user of users) {
      console.log(`\nüë§ Usu√°rio: ${user.name} (${user.email})`);
      console.log(`   Estado atual: isAdmin=${user.isAdmin}, role=${user.role}`);
      
      let newRole;
      let needsUpdate = false;
      
      // Determinar novo role baseado no isAdmin
      if (user.isAdmin === true) {
        if (user.role !== "admin") {
          newRole = "admin";
          needsUpdate = true;
          console.log(`   ‚úÖ Usu√°rio admin -> role: "admin"`);
        }
      } else {
        // Para usu√°rios n√£o-admin, definir como "funcionario" se n√£o estiver correto
        if (user.role !== "funcionario" && user.role !== "gerente" && user.role !== "visualizador") {
          newRole = "funcionario";
          needsUpdate = true;
          console.log(`   üë∑ Usu√°rio comum -> role: "funcionario"`);
        }
      }
      
      if (needsUpdate) {
        // Atualizar usu√°rio
        const updateData = {
          role: newRole,
          updatedAt: new Date()
        };
        
        // Remover campo isAdmin (opcional, mas recomendado)
        updateData.$unset = { isAdmin: 1 };
        
        await User.findByIdAndUpdate(user._id, updateData);
        console.log(`   ‚úÖ Usu√°rio corrigido com sucesso!`);
      } else {
        console.log(`   ‚ÑπÔ∏è  Usu√°rio j√° est√° correto`);
      }
    }
    
    console.log("\nüéâ Corre√ß√£o conclu√≠da com sucesso!");
    console.log("\nüìã Resumo das mudan√ßas:");
    console.log("   ‚Ä¢ Usu√°rios com isAdmin=true -> role='admin'");
    console.log("   ‚Ä¢ Usu√°rios com isAdmin=false -> role='funcionario'");
    console.log("   ‚Ä¢ Campo isAdmin removido");
    console.log("\nüí° Dica: Voc√™ pode alterar os roles dos usu√°rios 'funcionario' para 'gerente' ou 'visualizador' conforme necess√°rio.");
    console.log("   Use: npm run update:user <email> <role>");
    
  } catch (error) {
    console.error("‚ùå Erro durante a corre√ß√£o:", error);
  } finally {
    await mongoose.disconnect();
    console.log("üîå Desconectado do MongoDB");
  }
}

// Executar corre√ß√£o
if (import.meta.url === `file://${process.argv[1]}`) {
  fixUsers();
}

export { fixUsers };
