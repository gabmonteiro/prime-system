import dotenv from "dotenv";
dotenv.config({ path: ".env.local" });
// src/libs/db.js
import mongoose from "mongoose";

const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
  throw new Error(
    "Por favor, defina a vari√°vel MONGODB_URI no arquivo .env.local",
  );
}

/**
 * Global √© usado aqui para manter uma conex√£o cached atrav√©s de hot reloads
 * no desenvolvimento. Isso previne conex√µes duplicadas durante o desenvolvimento.
 */
let cached = global.mongoose;

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

async function connectDB() {
  try {
    // Se j√° tem conex√£o ativa e saud√°vel, retorna ela
    if (cached.conn && cached.conn.connection.readyState === 1) {
      return cached.conn;
    }

    // Se a conex√£o est√° em estado ruim, limpa o cache
    if (cached.conn && cached.conn.connection.readyState !== 1) {
      console.warn(
        "‚ö†Ô∏è Limpando conex√£o inativa. ReadyState:",
        cached.conn.connection.readyState,
      );
      cached.conn = null;
      cached.promise = null;
    }

    // Se n√£o h√° promise pendente, cria uma nova
    if (!cached.promise) {
      const opts = {
        bufferCommands: false,
        maxPoolSize: 10,
        serverSelectionTimeoutMS: 10000, // Aumentado para 10s
        socketTimeoutMS: 45000,
        connectTimeoutMS: 10000,
        family: 4,
        retryWrites: true,
        retryReads: true,
        maxIdleTimeMS: 30000,
        heartbeatFrequencyMS: 10000,
      };

      console.log("üîÑ Conectando ao MongoDB...");

      cached.promise = mongoose
        .connect(MONGODB_URI, opts)
        .then((mongoose) => {
          console.log("‚úÖ MongoDB conectado com sucesso!");
          console.log(
            `üìä Estado da conex√£o: ${mongoose.connection.readyState}`,
          );
          console.log(`üè† Host: ${mongoose.connection.host}`);
          console.log(`üóÉÔ∏è  Database: ${mongoose.connection.name}`);
          return mongoose;
        })
        .catch((error) => {
          console.error("‚ùå Erro ao conectar ao MongoDB:", error);
          cached.promise = null;
          throw new Error(`Falha na conex√£o MongoDB: ${error.message}`);
        });
    }

    // Aguarda a conex√£o
    cached.conn = await cached.promise;

    // Verifica√ß√£o final do estado da conex√£o
    if (!cached.conn || cached.conn.connection.readyState !== 1) {
      console.error("‚ùå Conex√£o MongoDB inv√°lida ap√≥s conectar");
      cached.conn = null;
      cached.promise = null;
      throw new Error("Conex√£o MongoDB inativa ap√≥s tentativa de conex√£o");
    }

    return cached.conn;
  } catch (error) {
    console.error("‚ùå Erro cr√≠tico na conex√£o MongoDB:", error);
    cached.conn = null;
    cached.promise = null;
    throw error;
  }
}

// Adicionar listeners para monitorar a conex√£o
mongoose.connection.on("connected", () => {
  console.log("üîó Mongoose conectado ao MongoDB");
});

mongoose.connection.on("error", (err) => {
  console.error("‚ùå Erro na conex√£o Mongoose:", err);
});

mongoose.connection.on("disconnected", () => {
  console.log("üîå Mongoose desconectado do MongoDB");
  // Limpar cache quando desconectar
  if (cached) {
    cached.conn = null;
    cached.promise = null;
  }
});

// Graceful shutdown
process.on("SIGINT", async () => {
  try {
    await mongoose.connection.close();
    console.log("üõë Conex√£o MongoDB fechada devido ao t√©rmino da aplica√ß√£o");
    process.exit(0);
  } catch (error) {
    console.error("‚ùå Erro ao fechar conex√£o MongoDB:", error);
    process.exit(1);
  }
});

export default connectDB;
