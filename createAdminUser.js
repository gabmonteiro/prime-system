import mongoose from "mongoose";
import dotenv from "dotenv";
import bcrypt from "bcryptjs";

// Carregar vari√°veis de ambiente
dotenv.config({ path: ".env.local" });

// Conectar ao MongoDB
async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log("üîó Conectado ao MongoDB");
  } catch (error) {
    console.error("‚ùå Erro ao conectar ao MongoDB:", error);
    process.exit(1);
  }
}

// Schema do usu√°rio
const UserSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, "Nome √© obrigat√≥rio"],
    trim: true,
  },
  email: {
    type: String,
    required: [true, "Email √© obrigat√≥rio"],
    unique: true,
    lowercase: true,
    trim: true,
  },
  password: {
    type: String,
    required: [true, "Senha √© obrigat√≥ria"],
    minlength: 6,
  },
  role: {
    type: String,
    enum: ["admin", "gerente", "funcionario", "visualizador"],
    default: "funcionario",
  },
  isActive: {
    type: Boolean,
    default: true,
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
  updatedAt: {
    type: Date,
    default: Date.now,
  },
});

const User = mongoose.model("User", UserSchema);

// Fun√ß√£o para criar usu√°rio administrador
async function createAdminUser() {
  try {
    console.log("üîÑ Criando usu√°rio administrador...");
    
    // Verificar se j√° existe um usu√°rio com este email
    const existingUser = await User.findOne({ email: "admin@prime.com" });
    
    if (existingUser) {
      console.log("‚ö†Ô∏è  Usu√°rio admin@prime.com j√° existe!");
      console.log("   ID:", existingUser._id);
      console.log("   Nome:", existingUser.name);
      console.log("   Role:", existingUser.role);
      
      // Perguntar se quer atualizar o role para admin
      console.log("\nüí° Para atualizar o role para 'admin', execute:");
      console.log("   npm run migrate:users");
      
      return;
    }
    
    // Hash da senha
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash("admin123", saltRounds);
    
    // Criar usu√°rio administrador
    const adminUser = new User({
      name: "Administrador",
      email: "admin@prime.com",
      password: hashedPassword,
      role: "admin",
      isActive: true
    });
    
    // Salvar no banco
    const savedUser = await adminUser.save();
    
    console.log("‚úÖ Usu√°rio administrador criado com sucesso!");
    console.log("   ID:", savedUser._id);
    console.log("   Nome:", savedUser.name);
    console.log("   Email:", savedUser.email);
    console.log("   Role:", savedUser.role);
    console.log("   Senha: admin123");
    
    console.log("\nüîê Credenciais de acesso:");
    console.log("   Email: admin@prime.com");
    console.log("   Senha: admin123");
    
    console.log("\nüí° Agora voc√™ pode:");
    console.log("   1. Fazer login com essas credenciais");
    console.log("   2. Executar 'npm run migrate:users' para migrar usu√°rios existentes");
    console.log("   3. Acessar todas as funcionalidades do sistema");
    
  } catch (error) {
    console.error("‚ùå Erro ao criar usu√°rio administrador:", error);
    
    if (error.code === 11000) {
      console.log("\nüí° O email j√° est√° em uso. Execute 'npm run migrate:users' para migrar usu√°rios existentes.");
    }
  } finally {
    await mongoose.disconnect();
    console.log("üîå Desconectado do MongoDB");
  }
}

// Fun√ß√£o para listar todos os usu√°rios
async function listUsers() {
  try {
    console.log("üìã Listando todos os usu√°rios...");
    
    const users = await User.find({}, { password: 0 });
    
    if (users.length === 0) {
      console.log("   Nenhum usu√°rio encontrado");
      return;
    }
    
    console.log(`\nüë• Total de usu√°rios: ${users.length}\n`);
    
    users.forEach((user, index) => {
      console.log(`${index + 1}. ${user.name} (${user.email})`);
      console.log(`   ID: ${user._id}`);
      console.log(`   Role: ${user.role}`);
      console.log(`   Ativo: ${user.isActive ? 'Sim' : 'N√£o'}`);
      console.log(`   Criado: ${user.createdAt.toLocaleDateString('pt-BR')}`);
      console.log("");
    });
    
  } catch (error) {
    console.error("‚ùå Erro ao listar usu√°rios:", error);
  } finally {
    await mongoose.disconnect();
    console.log("üîå Desconectado do MongoDB");
  }
}

// Fun√ß√£o para atualizar role de um usu√°rio espec√≠fico
async function updateUserRole(email, newRole) {
  try {
    console.log(`üîÑ Atualizando role do usu√°rio ${email} para ${newRole}...`);
    
    const validRoles = ["admin", "gerente", "funcionario", "visualizador"];
    if (!validRoles.includes(newRole)) {
      console.error("‚ùå Role inv√°lido. Use: admin, gerente, funcionario ou visualizador");
      return;
    }
    
    const user = await User.findOneAndUpdate(
      { email: email.toLowerCase() },
      { role: newRole, updatedAt: new Date() },
      { new: true }
    );
    
    if (!user) {
      console.error(`‚ùå Usu√°rio com email ${email} n√£o encontrado`);
      return;
    }
    
    console.log("‚úÖ Usu√°rio atualizado com sucesso!");
    console.log("   Nome:", user.name);
    console.log("   Email:", user.email);
    console.log("   Novo Role:", user.role);
    
  } catch (error) {
    console.error("‚ùå Erro ao atualizar usu√°rio:", error);
  } finally {
    await mongoose.disconnect();
    console.log("üîå Desconectado do MongoDB");
  }
}

// Executar baseado nos argumentos da linha de comando
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];
  
  switch (command) {
    case "create":
      await connectDB();
      await createAdminUser();
      break;
      
    case "list":
      await connectDB();
      await listUsers();
      break;
      
    case "update":
      if (args.length < 3) {
        console.log("‚ùå Uso: node createAdminUser.js update <email> <role>");
        console.log("   Exemplo: node createAdminUser.js update user@example.com admin");
        return;
      }
      await connectDB();
      await updateUserRole(args[1], args[2]);
      break;
      
    default:
      console.log("üîß Script para gerenciar usu√°rios no Prime System");
      console.log("\nüìñ Comandos dispon√≠veis:");
      console.log("   node createAdminUser.js create     - Criar usu√°rio administrador");
      console.log("   node createAdminUser.js list       - Listar todos os usu√°rios");
      console.log("   node createAdminUser.js update <email> <role> - Atualizar role de um usu√°rio");
      console.log("\nüí° Exemplos:");
      console.log("   node createAdminUser.js create");
      console.log("   node createAdminUser.js list");
      console.log("   node createAdminUser.js update user@example.com admin");
      console.log("\nüéØ Roles dispon√≠veis: admin, gerente, funcionario, visualizador");
  }
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { createAdminUser, listUsers, updateUserRole };
