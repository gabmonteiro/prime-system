import mongoose from "mongoose";
import dotenv from "dotenv";

// Carregar vari√°veis de ambiente
dotenv.config({ path: ".env.local" });

// Conectar ao MongoDB
async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log("üîó Conectado ao MongoDB");
  } catch (error) {
    console.error("‚ùå Erro ao conectar ao MongoDB:", error);
    process.exit(1);
  }
}

// Schemas para verificar dados
const ServicoSchema = new mongoose.Schema({
  cliente: String,
  tipoServico: mongoose.Schema.Types.Mixed,
  data: String,
  participantes: [mongoose.Schema.Types.Mixed],
  valorPersonalizado: Number,
  createdAt: Date,
  updatedAt: Date
});

const Servico = mongoose.model("Servico", ServicoSchema);

// Fun√ß√£o para corrigir dados corrompidos
async function fixCorruptedData() {
  try {
    console.log("üîÑ Verificando e corrigindo dados corrompidos...");
    
    // 1. Corrigir servi√ßos com participantes inv√°lidos
    console.log("\nüìã Verificando servi√ßos...");
    const servicos = await Servico.find({});
    console.log(`   Encontrados ${servicos.length} servi√ßos`);
    
    let servicosCorrigidos = 0;
    for (const servico of servicos) {
      let needsUpdate = false;
      const updateData = {};
      
      // Verificar participantes
      if (servico.participantes && Array.isArray(servico.participantes)) {
        const participantesCorrigidos = [];
        
        for (const participante of servico.participantes) {
          if (typeof participante === 'string') {
            console.log(`   ‚ö†Ô∏è  Servi√ßo ${servico._id}: participante inv√°lido "${participante}" (string) - removendo`);
            // Remover participante inv√°lido
            needsUpdate = true;
          } else if (participante && typeof participante === 'object' && participante._id) {
            // Verificar se o ObjectId √© v√°lido
            if (mongoose.Types.ObjectId.isValid(participante._id)) {
              participantesCorrigidos.push(participante._id);
            } else {
              console.log(`   ‚ö†Ô∏è  Servi√ßo ${servico._id}: ObjectId inv√°lido "${participante._id}" - removendo`);
              needsUpdate = true;
            }
          } else {
            console.log(`   ‚ö†Ô∏è  Servi√ßo ${servico._id}: participante inv√°lido ${JSON.stringify(participante)} - removendo`);
            needsUpdate = true;
          }
        }
        
        if (needsUpdate) {
          updateData.participantes = participantesCorrigidos;
          updateData.updatedAt = new Date();
        }
      }
      
      // Verificar tipoServico
      if (servico.tipoServico && typeof servico.tipoServico === 'string') {
        console.log(`   ‚ö†Ô∏è  Servi√ßo ${servico._id}: tipoServico inv√°lido "${servico.tipoServico}" (string) - removendo`);
        updateData.tipoServico = null;
        needsUpdate = true;
      }
      
      // Aplicar corre√ß√µes se necess√°rio
      if (needsUpdate) {
        await Servico.findByIdAndUpdate(servico._id, updateData);
        servicosCorrigidos++;
        console.log(`   ‚úÖ Servi√ßo ${servico._id} corrigido`);
      }
    }
    
    console.log(`\nüìä Resumo da corre√ß√£o de servi√ßos:`);
    console.log(`   Total de servi√ßos: ${servicos.length}`);
    console.log(`   Servi√ßos corrigidos: ${servicosCorrigidos}`);
    
    // 2. Verificar se h√° servi√ßos com participantes vazios ou inv√°lidos
    console.log("\nüîç Verificando servi√ßos com problemas...");
    const servicosComProblemas = await Servico.find({
      $or: [
        { participantes: { $exists: false } },
        { participantes: null },
        { participantes: { $size: 0 } },
        { "participantes.0": { $exists: false } }
      ]
    });
    
    console.log(`   Servi√ßos com problemas de participantes: ${servicosComProblemas.length}`);
    
    if (servicosComProblemas.length > 0) {
      console.log("   üí° Recomenda√ß√£o: Verifique se esses servi√ßos precisam de participantes");
    }
    
    console.log("\nüéâ Verifica√ß√£o e corre√ß√£o conclu√≠da!");
    console.log("\nüí° Pr√≥ximos passos:");
    console.log("   1. Execute 'npm run fix:users' para corrigir usu√°rios");
    console.log("   2. Teste o dashboard novamente");
    console.log("   3. Se ainda houver problemas, verifique os logs");
    
  } catch (error) {
    console.error("‚ùå Erro durante a corre√ß√£o:", error);
  } finally {
    await mongoose.disconnect();
    console.log("üîå Desconectado do MongoDB");
  }
}

// Fun√ß√£o para listar servi√ßos com problemas
async function listProblematicServices() {
  try {
    console.log("üîç Listando servi√ßos com problemas...");
    
    const servicos = await Servico.find({});
    console.log(`\nüìã Total de servi√ßos: ${servicos.length}\n`);
    
    let problemasEncontrados = 0;
    
    for (const servico of servicos) {
      let temProblema = false;
      const problemas = [];
      
      // Verificar participantes
      if (servico.participantes && Array.isArray(servico.participantes)) {
        for (const participante of servico.participantes) {
          if (typeof participante === 'string') {
            temProblema = true;
            problemas.push(`participante inv√°lido: "${participante}" (string)`);
          } else if (participante && typeof participante === 'object' && participante._id) {
            if (!mongoose.Types.ObjectId.isValid(participante._id)) {
              temProblema = true;
              problemas.push(`ObjectId inv√°lido: "${participante._id}"`);
            }
          }
        }
      }
      
      // Verificar tipoServico
      if (servico.tipoServico && typeof servico.tipoServico === 'string') {
        temProblema = true;
        problemas.push(`tipoServico inv√°lido: "${servico.tipoServico}" (string)`);
      }
      
      if (temProblema) {
        problemasEncontrados++;
        console.log(`${problemasEncontrados}. Servi√ßo ID: ${servico._id}`);
        console.log(`   Cliente: ${servico.cliente}`);
        console.log(`   Data: ${servico.data}`);
        console.log(`   Problemas: ${problemas.join(', ')}`);
        console.log("");
      }
    }
    
    if (problemasEncontrados === 0) {
      console.log("‚úÖ Nenhum problema encontrado nos servi√ßos!");
    } else {
      console.log(`‚ö†Ô∏è  Total de servi√ßos com problemas: ${problemasEncontrados}`);
      console.log("üí° Execute 'npm run fix:corrupted' para corrigir automaticamente");
    }
    
  } catch (error) {
    console.error("‚ùå Erro ao listar servi√ßos:", error);
  } finally {
    await mongoose.disconnect();
    console.log("üîå Desconectado do MongoDB");
  }
}

// Executar baseado nos argumentos da linha de comando
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];
  
  switch (command) {
    case "fix":
      await connectDB();
      await fixCorruptedData();
      break;
      
    case "list":
      await connectDB();
      await listProblematicServices();
      break;
      
    default:
      console.log("üîß Script para corrigir dados corrompidos no Prime System");
      console.log("\nüìñ Comandos dispon√≠veis:");
      console.log("   node fixCorruptedData.js fix   - Corrigir dados corrompidos automaticamente");
      console.log("   node fixCorruptedData.js list - Listar servi√ßos com problemas");
      console.log("\nüí° Exemplos:");
      console.log("   node fixCorruptedData.js fix");
      console.log("   node fixCorruptedData.js list");
      console.log("\nüéØ Este script corrige:");
      console.log("   ‚Ä¢ Participantes inv√°lidos em servi√ßos");
      console.log("   ‚Ä¢ ObjectIds corrompidos");
      console.log("   ‚Ä¢ Campos tipoServico inv√°lidos");
  }
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { fixCorruptedData, listProblematicServices };
